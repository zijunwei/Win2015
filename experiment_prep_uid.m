% this script saves the data stucture as follows:
% id(not necessary since they are already in the right position)
% fv: fisher vectors single vector for each
% cb: linear combinations: for example 1st and 2nd [1,2]
% uid: unique id generated by some function the represnet each fisher
% vector uniqely



Init;
trtst=0; % if 1 tr else tst
if trtst
    load('trVideoNames');
    load('num_thread_per_training_video');
    pattern='actioncliptrain';
else
    load('tstVideoNames');
    load('num_thread_per_testing_video');
    pattern='actioncliptest';
end
max_files=6;

load('fv_struct.mat');
thread_file_names={fv_struct.filename};
% prune out non_related files


ind=strfind(thread_file_names,pattern);
index  = find(~cellfun(@isempty,ind));
thread_file_names=thread_file_names(index);
fv_struct=fv_struct(index);



fv_info = struct('cb',{},'fv',{},'uid',{},'name',{});

for i=1:1:length(VideoNames)
    
    idx=1;
    ind=strfind(thread_file_names,VideoNames{i});
    index  = find(~cellfun(@isempty,ind));
    thread_fvs=[fv_struct(index).fv];
    thread_names={fv_struct(index).filename};
    num_files=size(thread_fvs,2);
    % if the number of files is larger than max_file, the first max_files
    % fisher vectors
        if num_files>max_files;
           num_files=max_files;
    
        end
    
    for j=num_files:-1:1
        
        combid=combnk(1:num_files,j);
        for k=1:1:size(combid,1)
            fv=thread_fvs(:,combid(k,:));
            fv_info(i).cb{idx}=combid(k,:);
            %fv_info(i).fv{idx}=sum(fv,2);
            fv_info(i).fv{idx}=fv;
            fv_info(i).name{idx}=thread_names(combid(k,:));
            fv_info(i).uid{idx}=Zj_Util.generate_guid();
            idx=idx+1;
            
        end
    end
end

if trtst
    save_file='uid_tr_struct_NONl2.mat';
else
    save_file='uid_tst_struct_NONl2.mat';
end
save(save_file,'fv_info','-v7.3');