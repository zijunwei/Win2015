function [predicted, model, tr_tpr, tr_tnr, tst_tpr, tst_tnr] =  ...
    ml_svm(trainData, testData, trainLabel, testLabel, opts)
% predicted = ml_svm(trainData, testData, trainLabel, testLabel, opts)
% train SVM classifier and test on test data.
% Inputs:
%   trainData, testData: train and test data, given in column format.
%   trainLabel: labels of train data points. This is a column vector,
%       trainLabel(i) is the label of column i_th of trainData.
%   testLabel: ground truth labels of the test data. This is just to help
%       the LibSVM to compute the error of the classification. If testLabel
%       is unkown, it can be set to [].
%   opts: the options of svmtrain.
% Outputs:
%   predicted: predicted labels of test data, this is a column vector.
% By: Minh Hoai Nguyen (minhhoai@cmu.edu)
% Date: 26 June 07.

model = svmtrain(trainLabel, trainData', opts);  

predicted = svmpredict(trainLabel, trainData', model);
posTrIdxs = find(trainLabel == 1);
negTrIdxs = find(trainLabel == -1);

% weights for constraints
nPos = length(posTrIdxs);
nNeg = length(negTrIdxs);
constrW = zeros(n, 1);
constrW(label == 1)  = 1/nPos;
constrW(label == -1) = 1/nNeg;
opts = sprintf('%s -w1 %d -w


tr_tpr = sum(predicted(posTrIdxs) == 1)/length(posTrIdxs);
tr_tnr = sum(predicted(negTrIdxs) == -1)/length(negTrIdxs);
fprintf('Training: true positive rate: %g, true negative rate: %g\n', ...
    tr_tpr, tr_tnr);


if ~isempty(testData)
    if isempty(testLabel)
        testLabel = zeros(size(testData,2),1);
    end;
    predicted = svmpredict(testLabel, testData', model);

    posTstIdxs = find(testLabel == 1);
    negTstIdxs = find(testLabel == -1);

    tst_tpr = sum(predicted(posTstIdxs) == 1)/length(posTstIdxs);
    tst_tnr = sum(predicted(negTstIdxs) == -1)/length(negTstIdxs);
    fprintf('Testing: true positive rate: %g, true negative rate: %g\n', ...
        tst_tpr, tst_tnr);
end;